tip 
    without sudo keyin
        http://askubuntu.com/questions/477551/how-can-i-use-docker-without-sudo
km        
    http://www.superwu.cn/category/docker/        
        
asp.net
    https://blogs.msdn.microsoft.com/webdev/2015/01/14/running-asp-net-5-applications-in-linux-containers-with-docker/
    https://blog.tonysneed.com/2015/05/25/develop-and-deploy-asp-net-5-apps-to-docker-on-linux/
    http://www.hanselman.com/blog/PublishingAnASPNET5AppToDockerOnLinuxWithVisualStudio.aspx
    https://docs.asp.net/en/1.0.0-rc1/getting-started/installing-on-linux.html
    https://study4.gitbooks.io/azure/content/VM/Ubuntu/ASP.NET%20MVC%20In%20Docker/ASP.NET%20MVC%20In%20Docker.html
    http://www.slideshare.net/imac-cloud/docker-61970852
    http://dockone.io/article/1445
    
nodejs    
    https://nodejs.org/en/docs/guides/nodejs-docker-webapp/
    https://docs.docker.com/v1.10/engine/examples/nodejs_web_app/
    https://nodesource.com/blog/dockerizing-your-nodejs-applications/
    https://www.airpair.com/node.js/posts/getting-started-with-docker-for-the-nodejs-dev
    http://dockone.io/article/944
    
*. install docker below ubuntu 14.04 
    sudo apt-get install docker.io

* commands (cname==>container_name)
    docker search                                   --search images in public repository
    docker images                                   --list images
    docker commit [option] container                --generate a new image
    docker port image-name port                     --check the port of host
    docker run -dit --name alias_name image_name 
    docker ps                                       --list all running container
    docker search python                            --search docker image in public repository
    docker run -dit --name cname image_name         -- run a image_name with cname in the background
    docker stop container_name
    docker restart container_name
    docker rm -f container_name                     --remove a container ==> -f mean force
    docker rm $(docker ps -a -q)                    --remove all container
    docker logs container_name
    docker inspect container_name           
    docker attach cname                             --attach to a running container
    docker cp cname:/the_file_in_container host_dir --copy a container file to host 
    docker commit cname image_name                  --docker commit nodejs1111 new_image_name
    docker rmi image_name
    
    docker save -o output.tar image_name            --save a image to be a file for later load usage 
        this could help docker load image from file without process behind proxy
    docker load -i the_tar_name_for_loading 
    
    docker events                                   --start tailing the docker operation history
    docker build                                    --build a image from a description file
    
    docker run -P or docker run--publish-all        --publish all port
    
* how to attach and execute /bin/bash at container which already running other command
    docker exec -it cname bash      --execute bash at container(cname) with -i interactive ability and -t attach immediately
    
  
* usging behind proxy
    export "HTTPS_PROXY=https://xxxx"
    export "HTTP_PROXY=http://xxxx"
    * http://stackoverflow.com/questions/23111631/cannot-download-docker-images-behind-a-proxy
    https://github.com/docker/toolbox/issues/102
    https://docs.docker.com/engine/admin/systemd/
    http://mflo.io/2015/08/13/docker-machine-behind-proxy/

* save running instance image and load it on another host
    docker ps -a                                    // check all running instance
    docker commit 3a09b2588478 mynewimage           // and commit one running ID to be a image 
    docker save mynewimage > /tmp/mynewimage.tar    // save it to a file
    copy files                                      // transfer file thru cdrom or what ever you want
    docker load < /tmp/mynewimage.tar               // load this image to another dockered machine

* good url for reference
    http://www.codedata.com.tw/social-coding/docker-layman-abc/
    
* test if the image is ok
    docker run -i -t ubuntu echo Hello world!
    
* run a image named nodejs 1111 from image google/nodejs and initial run at /bin/bash    
    docker run -v /code:/code2 -p 0.0.0.0:11111:2222 -it --rm --name nodejs1111 google/nodejs /bin/bash    
    -p 11111:2222                               link host port 11111 to container's 2222 port
    -i interactive
    -t attach
    -v host_folder:/container_folder            mount host path to container's path
    -v host_folder:/container_folder:ro         :ro mean read only :rw mean read/write
    -d make container run in the background
    -e setup environment variable
    --rm mean if you exit, this container gone disappear
    --link=[] establish connection with other container (container name use alias name)
    --restart options
        no: default do not restart even container dead
        on-failure: only restart on failure happen on-failure:3 ==> retry 3 times 
        always: always restart if container is dead
