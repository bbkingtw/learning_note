batch
    neo4j-js
        var batch = graph.createBatch();

        //create a node and get another in the same request
        graph.createNode(batch, { key: 'value' }, function (error, node) {
            //this will not be called until after batch.run()
        });
        graph.getNode(batch, 18, function (error, node) {
            //this will not be called until after batch.run()
        });

        batch.run();
        
        
loader
    owl <===> graphdb
    owl 3 version dl, lite, full
    
on trigger 
    on match
    on create
    store procedure (reasoning) 
    
neo4j loadcsv 
    MATCH(n:emp) DETACH DELETE n
    LOAD CSV WITH HEADERS FROM "http://10.37.82.200:1483/csv" AS e create (n:emp { NAME:e.NAME, SEX:e.SEX, DEPTID:e.DEPTID, EMPLID:e.EMPLID, SUPERVISOR_ID:e.SUPERVISOR_ID});
    CREATE INDEX ON :emp(EMPLID);
    USING PERIODIC COMMIT LOAD CSV WITH HEADERS FROM "http://10.37.82.200:1483/csv" AS e match(n:emp {EMPLID:e.EMPLID}),(m:emp {EMPLID:e.SUPERVISOR_ID}) create (n)-[:listen_to]->(m);
    (巨量前面加這個) USING PERIODIC COMMIT row_count

delete dups relations
    start r=relationship(*) 
    match s-[r]->e 
    with s,e,type(r) as typ, tail(collect(r)) as coll 
    foreach(x in coll | delete x)

delete dups nodes
    MATCH (n:Person),(m:Person)
    WHERE n <> m and n.id = m.id
    DELETE m

load all nodes and connections
    LOAD CSV FROM "file:////Users/sagivo/dev/work/brewster/log/export_graph.csv" as line  
    match (p:Person)
    where p.id in tail(line)
    match (f:Person {id: line[0]} )
    create (f)-[:Connected]->(p)

get top connected people
    match (p:Person)-[r:Connected]->(Person)
    return p, count(r)
    order by count(r) desc
    limit 20

delete all nodes and connections
    START n = node(*) 
    OPTIONAL MATCH n-[r]-() 
    DELETE n, r;

db profile on searching (like oracle f5)
    PROFILE
    MATCH(n:emp)-[r]->(m)
    RETURN distinct n.NAME;

on create, on match (like store procedure...)
    MERGE (keanu:Person { name:'Keanu Reeves' })
    ON CREATE SET keanu.created = timestamp()
    ON MATCH SET keanu.lastSeen = timestamp()
    RETURN keanu.name, keanu.created, keanu.lastSeen

procedure 
    Procedures are written in Java and compiled into jar files. They can be deployed to the database by dropping a jar file 
    into the $NEO4J_HOME/plugins directory on each standalone or clustered server. The database must be re-started on each 
    server to pick up new procedures.

query
    who is staff for xxxx
        match(n:emp)<-[r]-(m) where n.EMPLID='xxxx' return n.EMPLID, COLLECT(DISTINCT m.EMPLID)
    
nodejs
    https://www.npmjs.com/package/neo4j-driver
    
loading csv
    https://dzone.com/articles/load-csv-neo4j-quickly-and

cyphersql    
    cheatset
        http://neo4j.com/docs/2.3.1/cypher-refcard/
        http://neo4j.com/docs/pdf/neo4j-cypher-refcard-stable.pdf
        best one
            http://semanticommunity.info/@api/deki/files/25765/Neo4j_CheatSheet_v3.pdf
        
    https://dzone.com/articles/neo4j-and-cypher-creating
    http://console.neo4j.org/

ontology for daml
    http://www.daml.org/ontologies/

sparql and owl extention for neo4j
    https://comsys.informatik.uni-kiel.de/lang/de/res/sparql-and-owl-2-inference-for-neo4j/

neo4js vs owl rdf
    https://github.com/SciGraph/SciGraph/wiki/Neo4jMapping

rdf and neo4j
    https://github.com/semr/neo4jena

batch importing northwind to neo4j
    https://neo4j.com/developer/guide-importing-data-and-etl/  (periodic commit & match & merge then)
    
rest insert data to neo4j
    http://jexp.de/blog/2013/05/on-importing-data-in-neo4j-blog-series/
    
neo4java
    https://markorodriguez.com/2011/02/23/knowledge-representation-and-reasoning-with-graph-databases/
    
   
semantic with neo4j
    http://connected-data.london/2016/06/02/building-semantic-graph-neo4j/
    
semantic web
    http://www.semanticweb.rs/document.aspx?id=34&lang=2
    
cypher sql
    http://www.remwebdevelopment.com/blog/sql/some-basic-and-useful-cypher-queries-for-neo4j-201.html

neo4j vs orientdb
    http://ylzhj02.iteye.com/blog/2194974

neo4j vs nodejs
    simple
        https://www.npmjs.com/package/neo4j
    rest --> api 
        https://www.npmjs.com/package/node-neo4j
    request, and npm 
        http://blog.modulus.io/learn-how-to-use-neo4j-with-node.js?utm_content=12954986&utm_medium=social&utm_source=twitter

rest api with curl operation
    https://www.packtpub.com/mapt/book/Big+Data+and+Business+Intelligence/9781783287253/2/ch02lvl1sec25/Accessing+Neo4j+from+the+command+line+using+curl
    
rest api with curl (auth)
    http://stackoverflow.com/questions/27822440/curl-command-neo4j
    http://stackoverflow.com/questions/33866146/neo4j-rest-api-authentication-and-authorization
    https://books.google.com.tw/books?id=hCcxCgAAQBAJ&pg=PA16&lpg=PA16&dq=rest+authority+for+neo4j&source=bl&ots=y_9TnPlAZJ&sig=1iJCQaZptLdm2KQiFZKlj48YHMQ&hl=zh-TW&sa=X&ved=0ahUKEwjAlve8k-jPAhWMKo8KHXdVANYQ6AEIMTAD#v=onepage&q=rest%20authority%20for%20neo4j&f=false
    
http://stackoverflow.com/questions/1754628/graph-database-in-java-other-than-neo4j

graphdb compare
    http://db-engines.com/en/system/Cassandra%3bNeo4j%3bTitan
